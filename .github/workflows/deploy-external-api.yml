name: Continuous Deployment - External API

on:
  workflow_call:
    inputs:
      tags:
        description: '배포할 Api 모듈 태그 정보 (Api-v*.*.*)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

permissions:
  contents: read

jobs:
  deployment:
    runs-on: ubuntu-20.04

    steps:
      # 1. Compare branch 코드 내려 받기
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.push.base_ref }}

      # 2. 버전 정보 추출 (태그 정보에서 *.*.*만 추출)
      - name: Get Version
        id: get_version
        run: |
          RELEASE_VERSION_WITHOUT_V="$(cut -d'v' -f2 <<< ${{ inputs.tags }})"
          echo "VERSION=$RELEASE_VERSION_WITHOUT_V" >> $GITHUB_OUTPUT

      # 3. 자바 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. FCM Admin SDK 파일 생성
      - name: Create Json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: ${{ secrets.FIREBASE_ADMIN_SDK_FILE }}
          json: ${{ secrets.FIREBASE_ADMIN_SDK }}
          dir: ${{ secrets.FIREBASE_ADMIN_SDK_DIR }}

      # 5. Build Gradle
      - name: Build Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew :pennyway-app-external-api:build --parallel --stacktrace --info -x test
        shell: bash

      # 6. Docker 이미지 build 및 push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t pennyway/pennyway-was:${{ steps.get_version.outputs.VERSION }} ./pennyway-app-external-api
          docker build -t pennyway/pennyway-was:latest ./pennyway-app-external-api
          docker push pennyway/pennyway-was:${{ steps.get_version.outputs.VERSION }}
          docker push pennyway/pennyway-was:latest

      # 7. AWS SSM을 통한 Run-Command (Docker 이미지 pull 후 docker-compose를 통한 실행)
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.AWS_DEV_INSTANCE_ID }}
          working-directory: /home/ubuntu
          command: |
            # 새 버전 배포
            docker-compose up -d $NEW_SERVICE
            
            # 새 버전 헬스 체크
            for i in {1..30}; do
              if curl -s http://localhost:$NEW_PORT/health | grep -q "UP"; then
                echo "New version is healthy"
            
                # 트래픽 전환 (여기서는 간단히 표현. 실제로는 로드 밸런서 설정 변경 등이 필요)
                echo "Switching traffic to new version"
            
                # 이전 버전 종료
                if [ -n "$CURRENT_SERVICE" ] && [ "$CURRENT_SERVICE" != "$NEW_SERVICE" ]; then
                  docker-compose stop $CURRENT_SERVICE
                  docker-compose rm -f $CURRENT_SERVICE
                fi
            
                echo "Deployment successful"
                exit 0
              fi
              echo "Waiting for health check... Attempt $i"
              sleep 10
            done
            
            echo "New version failed health check. Rolling back."
            docker-compose stop $NEW_SERVICE
            docker-compose rm -f $NEW_SERVICE
            echo "Rollback complete. Still running previous version."
            exit 1

      # 8. 배포 결과 확인
      - name: Check deployment result
        if: failure()
        run: |
          echo "Deployment failed. Please check the logs and take necessary actions."
          exit 1
